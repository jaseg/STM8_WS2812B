                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.7.0 #10231 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _uptime_routine
                                     12 	.globl _main
                                     13 	.globl _set_stars
                                     14 	.globl _nbLedsBytes
                                     15 	.globl _c
                                     16 	.globl _b
                                     17 	.globl _a
                                     18 	.globl _x
                                     19 	.globl _wind
                                     20 	.globl _flameprime
                                     21 	.globl _flame
                                     22 	.globl _LedsArray
                                     23 	.globl _random
                                     24 	.globl _flicker
                                     25 	.globl __delay_us
                                     26 	.globl __delay_ms
                                     27 	.globl _assert_failed
                                     28 ;--------------------------------------------------------
                                     29 ; ram data
                                     30 ;--------------------------------------------------------
                                     31 	.area DATA
      000000                         32 _LedsArray::
      000000                         33 	.ds 150
      000096                         34 _flame::
      000096                         35 	.ds 1
      000097                         36 _flameprime::
      000097                         37 	.ds 1
      000098                         38 _wind::
      000098                         39 	.ds 1
      000099                         40 _x::
      000099                         41 	.ds 1
      00009A                         42 _a::
      00009A                         43 	.ds 1
      00009B                         44 _b::
      00009B                         45 	.ds 1
      00009C                         46 _c::
      00009C                         47 	.ds 1
                                     48 ;--------------------------------------------------------
                                     49 ; ram data
                                     50 ;--------------------------------------------------------
                                     51 	.area INITIALIZED
      000000                         52 _nbLedsBytes::
      000000                         53 	.ds 2
                                     54 ;--------------------------------------------------------
                                     55 ; Stack segment in internal ram 
                                     56 ;--------------------------------------------------------
                                     57 	.area	SSEG
      000000                         58 __start__stack:
      000000                         59 	.ds	1
                                     60 
                                     61 ;--------------------------------------------------------
                                     62 ; absolute external ram data
                                     63 ;--------------------------------------------------------
                                     64 	.area DABS (ABS)
                                     65 ;--------------------------------------------------------
                                     66 ; interrupt vector 
                                     67 ;--------------------------------------------------------
                                     68 	.area HOME
      000000                         69 __interrupt_vect:
      000000 82v00u00u00             70 	int s_GSINIT ; reset
                                     71 ;--------------------------------------------------------
                                     72 ; global & static initialisations
                                     73 ;--------------------------------------------------------
                                     74 	.area HOME
                                     75 	.area GSINIT
                                     76 	.area GSFINAL
                                     77 	.area GSINIT
      000000                         78 __sdcc_gs_init_startup:
      000000                         79 __sdcc_init_data:
                                     80 ; stm8_genXINIT() start
      000000 AEr00r00         [ 2]   81 	ldw x, #l_DATA
      000003 27 07            [ 1]   82 	jreq	00002$
      000005                         83 00001$:
      000005 72 4FuFFuFF      [ 1]   84 	clr (s_DATA - 1, x)
      000009 5A               [ 2]   85 	decw x
      00000A 26 F9            [ 1]   86 	jrne	00001$
      00000C                         87 00002$:
      00000C AEr00r00         [ 2]   88 	ldw	x, #l_INITIALIZER
      00000F 27 09            [ 1]   89 	jreq	00004$
      000011                         90 00003$:
      000011 D6uFFuFF         [ 1]   91 	ld	a, (s_INITIALIZER - 1, x)
      000014 D7uFFuFF         [ 1]   92 	ld	(s_INITIALIZED - 1, x), a
      000017 5A               [ 2]   93 	decw	x
      000018 26 F7            [ 1]   94 	jrne	00003$
      00001A                         95 00004$:
                                     96 ; stm8_genXINIT() end
                                     97 	.area GSFINAL
      000000 CCr00r04         [ 2]   98 	jp	__sdcc_program_startup
                                     99 ;--------------------------------------------------------
                                    100 ; Home
                                    101 ;--------------------------------------------------------
                                    102 	.area HOME
                                    103 	.area HOME
      000004                        104 __sdcc_program_startup:
      000004 CCr00r9D         [ 2]  105 	jp	_main
                                    106 ;	return from main will return to caller
                                    107 ;--------------------------------------------------------
                                    108 ; code
                                    109 ;--------------------------------------------------------
                                    110 	.area CODE
                                    111 ;	proj/main.c: 20: void set_stars(uint16_t mask) {
                                    112 ;	-----------------------------------------
                                    113 ;	 function set_stars
                                    114 ;	-----------------------------------------
      000000                        115 _set_stars:
                                    116 ;	proj/main.c: 21: GPIOD->ODR &= ~(D_PINS);
      000000 C6 50 0F         [ 1]  117 	ld	a, 0x500f
      000003 A4 81            [ 1]  118 	and	a, #0x81
      000005 C7 50 0F         [ 1]  119 	ld	0x500f, a
                                    120 ;	proj/main.c: 22: GPIOB->ODR &= ~(B_PINS);
      000008 C6 50 05         [ 1]  121 	ld	a, 0x5005
      00000B A4 CF            [ 1]  122 	and	a, #0xcf
      00000D C7 50 05         [ 1]  123 	ld	0x5005, a
                                    124 ;	proj/main.c: 23: GPIOC->ODR &= ~(C_PINS);
      000010 C6 50 0A         [ 1]  125 	ld	a, 0x500a
      000013 A4 07            [ 1]  126 	and	a, #0x07
      000015 C7 50 0A         [ 1]  127 	ld	0x500a, a
                                    128 ;	proj/main.c: 25: mask = ~mask;
      000018 1E 03            [ 2]  129 	ldw	x, (0x03, sp)
      00001A 53               [ 2]  130 	cplw	x
      00001B 1F 03            [ 2]  131 	ldw	(0x03, sp), x
                                    132 ;	proj/main.c: 26: if (mask & 0x01)
      00001D 7B 04            [ 1]  133 	ld	a, (0x04, sp)
      00001F 44               [ 1]  134 	srl	a
      000020 24 04            [ 1]  135 	jrnc	00102$
                                    136 ;	proj/main.c: 27: GPIOD->ODR |= 1<<1;
      000022 72 12 50 0F      [ 1]  137 	bset	20495, #1
      000026                        138 00102$:
                                    139 ;	proj/main.c: 28: if (mask & 0x02)
      000026 7B 04            [ 1]  140 	ld	a, (0x04, sp)
      000028 A5 02            [ 1]  141 	bcp	a, #0x02
      00002A 27 04            [ 1]  142 	jreq	00104$
                                    143 ;	proj/main.c: 29: GPIOD->ODR |= 1<<2;
      00002C 72 14 50 0F      [ 1]  144 	bset	20495, #2
      000030                        145 00104$:
                                    146 ;	proj/main.c: 30: if (mask & 0x04)
      000030 7B 04            [ 1]  147 	ld	a, (0x04, sp)
      000032 A5 04            [ 1]  148 	bcp	a, #0x04
      000034 27 04            [ 1]  149 	jreq	00106$
                                    150 ;	proj/main.c: 31: GPIOD->ODR |= 1<<3;
      000036 72 16 50 0F      [ 1]  151 	bset	20495, #3
      00003A                        152 00106$:
                                    153 ;	proj/main.c: 32: if (mask & 0x08)
      00003A 7B 04            [ 1]  154 	ld	a, (0x04, sp)
      00003C A5 08            [ 1]  155 	bcp	a, #0x08
      00003E 27 04            [ 1]  156 	jreq	00108$
                                    157 ;	proj/main.c: 33: GPIOD->ODR |= 1<<4;
      000040 72 18 50 0F      [ 1]  158 	bset	20495, #4
      000044                        159 00108$:
                                    160 ;	proj/main.c: 34: if (mask & 0x10)
      000044 7B 04            [ 1]  161 	ld	a, (0x04, sp)
      000046 A5 10            [ 1]  162 	bcp	a, #0x10
      000048 27 04            [ 1]  163 	jreq	00110$
                                    164 ;	proj/main.c: 35: GPIOD->ODR |= 1<<5;
      00004A 72 1A 50 0F      [ 1]  165 	bset	20495, #5
      00004E                        166 00110$:
                                    167 ;	proj/main.c: 36: if (mask & 0x20)
      00004E 7B 04            [ 1]  168 	ld	a, (0x04, sp)
      000050 A5 20            [ 1]  169 	bcp	a, #0x20
      000052 27 04            [ 1]  170 	jreq	00112$
                                    171 ;	proj/main.c: 37: GPIOD->ODR |= 1<<6;
      000054 72 1C 50 0F      [ 1]  172 	bset	20495, #6
      000058                        173 00112$:
                                    174 ;	proj/main.c: 38: if (mask & 0x40)
      000058 7B 04            [ 1]  175 	ld	a, (0x04, sp)
      00005A A5 40            [ 1]  176 	bcp	a, #0x40
      00005C 27 04            [ 1]  177 	jreq	00114$
                                    178 ;	proj/main.c: 39: GPIOB->ODR |= 1<<4;
      00005E 72 18 50 05      [ 1]  179 	bset	20485, #4
      000062                        180 00114$:
                                    181 ;	proj/main.c: 40: if (mask & 0x80)
      000062 0D 04            [ 1]  182 	tnz	(0x04, sp)
      000064 2A 04            [ 1]  183 	jrpl	00116$
                                    184 ;	proj/main.c: 41: GPIOB->ODR |= 1<<5;
      000066 72 1A 50 05      [ 1]  185 	bset	20485, #5
      00006A                        186 00116$:
                                    187 ;	proj/main.c: 42: if (mask & 0x100)
      00006A 7B 03            [ 1]  188 	ld	a, (0x03, sp)
      00006C 44               [ 1]  189 	srl	a
      00006D 24 04            [ 1]  190 	jrnc	00118$
                                    191 ;	proj/main.c: 43: GPIOC->ODR |= 1<<3;
      00006F 72 16 50 0A      [ 1]  192 	bset	20490, #3
      000073                        193 00118$:
                                    194 ;	proj/main.c: 44: if (mask & 0x200)
      000073 7B 03            [ 1]  195 	ld	a, (0x03, sp)
      000075 A5 02            [ 1]  196 	bcp	a, #0x02
      000077 27 04            [ 1]  197 	jreq	00120$
                                    198 ;	proj/main.c: 45: GPIOC->ODR |= 1<<4;
      000079 72 18 50 0A      [ 1]  199 	bset	20490, #4
      00007D                        200 00120$:
                                    201 ;	proj/main.c: 46: if (mask & 0x400)
      00007D 7B 03            [ 1]  202 	ld	a, (0x03, sp)
      00007F A5 04            [ 1]  203 	bcp	a, #0x04
      000081 27 04            [ 1]  204 	jreq	00122$
                                    205 ;	proj/main.c: 47: GPIOC->ODR |= 1<<5;
      000083 72 1A 50 0A      [ 1]  206 	bset	20490, #5
      000087                        207 00122$:
                                    208 ;	proj/main.c: 48: if (mask & 0x800)
      000087 7B 03            [ 1]  209 	ld	a, (0x03, sp)
      000089 A5 08            [ 1]  210 	bcp	a, #0x08
      00008B 27 04            [ 1]  211 	jreq	00124$
                                    212 ;	proj/main.c: 49: GPIOC->ODR |= 1<<6;
      00008D 72 1C 50 0A      [ 1]  213 	bset	20490, #6
      000091                        214 00124$:
                                    215 ;	proj/main.c: 50: if (mask & 0x1000)
      000091 7B 03            [ 1]  216 	ld	a, (0x03, sp)
      000093 A5 10            [ 1]  217 	bcp	a, #0x10
      000095 26 01            [ 1]  218 	jrne	00193$
      000097 81               [ 4]  219 	ret
      000098                        220 00193$:
                                    221 ;	proj/main.c: 51: GPIOC->ODR |= 1<<7;
      000098 72 1E 50 0A      [ 1]  222 	bset	20490, #7
                                    223 ;	proj/main.c: 52: }
      00009C 81               [ 4]  224 	ret
                                    225 ;	proj/main.c: 54: void main(void) {  
                                    226 ;	-----------------------------------------
                                    227 ;	 function main
                                    228 ;	-----------------------------------------
      00009D                        229 _main:
      00009D 52 08            [ 2]  230 	sub	sp, #8
                                    231 ;	proj/main.c: 56: CLK->CKDIVR = 0x00;
      00009F 35 00 50 C6      [ 1]  232 	mov	0x50c6+0, #0x00
                                    233 ;	proj/main.c: 57: CLK->PCKENR1 |= 0x20;
      0000A3 C6 50 C7         [ 1]  234 	ld	a, 0x50c7
      0000A6 41               [ 1]  235 	exg	a, xl
      0000A7 4F               [ 1]  236 	clr	a
      0000A8 41               [ 1]  237 	exg	a, xl
      0000A9 AA 20            [ 1]  238 	or	a, #0x20
      0000AB 88               [ 1]  239 	push	a
      0000AC 84               [ 1]  240 	pop	a
      0000AD C7 50 C7         [ 1]  241 	ld	0x50c7, a
                                    242 ;	proj/main.c: 59: GPIOD->DDR |= D_PINS;
      0000B0 C6 50 11         [ 1]  243 	ld	a, 0x5011
      0000B3 AA 7E            [ 1]  244 	or	a, #0x7e
      0000B5 C7 50 11         [ 1]  245 	ld	0x5011, a
                                    246 ;	proj/main.c: 60: GPIOB->DDR |= B_PINS;
      0000B8 C6 50 07         [ 1]  247 	ld	a, 0x5007
      0000BB AA 30            [ 1]  248 	or	a, #0x30
      0000BD C7 50 07         [ 1]  249 	ld	0x5007, a
                                    250 ;	proj/main.c: 61: GPIOC->DDR |= C_PINS;
      0000C0 C6 50 0C         [ 1]  251 	ld	a, 0x500c
      0000C3 AA F8            [ 1]  252 	or	a, #0xf8
      0000C5 C7 50 0C         [ 1]  253 	ld	0x500c, a
                                    254 ;	proj/main.c: 62: GPIOA->DDR |= (1<<3);
      0000C8 72 16 50 02      [ 1]  255 	bset	20482, #3
                                    256 ;	proj/main.c: 63: GPIOA->CR1 |=  0x08;
      0000CC C6 50 03         [ 1]  257 	ld	a, 0x5003
      0000CF 41               [ 1]  258 	exg	a, xl
      0000D0 4F               [ 1]  259 	clr	a
      0000D1 41               [ 1]  260 	exg	a, xl
      0000D2 AA 08            [ 1]  261 	or	a, #0x08
      0000D4 88               [ 1]  262 	push	a
      0000D5 84               [ 1]  263 	pop	a
      0000D6 C7 50 03         [ 1]  264 	ld	0x5003, a
                                    265 ;	proj/main.c: 64: GPIOA->CR2 &= ~0x08;
      0000D9 C6 50 04         [ 1]  266 	ld	a, 0x5004
      0000DC A4 F7            [ 1]  267 	and	a, #0xf7
      0000DE C7 50 04         [ 1]  268 	ld	0x5004, a
                                    269 ;	proj/main.c: 66: TIM2->CR1   =  0x01;
      0000E1 35 01 53 00      [ 1]  270 	mov	0x5300+0, #0x01
                                    271 ;	proj/main.c: 67: TIM2->CCMR3 =  0x60;
      0000E5 35 60 53 09      [ 1]  272 	mov	0x5309+0, #0x60
                                    273 ;	proj/main.c: 68: TIM2->CCER2 =  0x01;
      0000E9 35 01 53 0B      [ 1]  274 	mov	0x530b+0, #0x01
                                    275 ;	proj/main.c: 69: TIM2->ARRH  =  0x01;
      0000ED 35 01 53 0F      [ 1]  276 	mov	0x530f+0, #0x01
                                    277 ;	proj/main.c: 70: TIM2->ARRL  =  0x00;
      0000F1 35 00 53 10      [ 1]  278 	mov	0x5310+0, #0x00
                                    279 ;	proj/main.c: 76: k = 0;
      0000F5 5F               [ 1]  280 	clrw	x
      0000F6 1F 07            [ 2]  281 	ldw	(0x07, sp), x
                                    282 ;	proj/main.c: 77: l = 100;
      0000F8 AE 00 64         [ 2]  283 	ldw	x, #0x0064
      0000FB 1F 05            [ 2]  284 	ldw	(0x05, sp), x
                                    285 ;	proj/main.c: 78: m = 0;
      0000FD 5F               [ 1]  286 	clrw	x
      0000FE 1F 03            [ 2]  287 	ldw	(0x03, sp), x
                                    288 ;	proj/main.c: 79: while(1) { 
      000100                        289 00116$:
                                    290 ;	proj/main.c: 84: _delay_ms(50);
      000100 4B 32            [ 1]  291 	push	#0x32
      000102 4B 00            [ 1]  292 	push	#0x00
      000104 CDr02r95         [ 4]  293 	call	__delay_ms
      000107 5B 02            [ 2]  294 	addw	sp, #2
                                    295 ;	proj/main.c: 87: if (k == 0)
      000109 1E 07            [ 2]  296 	ldw	x, (0x07, sp)
      00010B 26 09            [ 1]  297 	jrne	00104$
                                    298 ;	proj/main.c: 88: set_stars(0);
      00010D 5F               [ 1]  299 	clrw	x
      00010E 89               [ 2]  300 	pushw	x
      00010F CDr00r00         [ 4]  301 	call	_set_stars
      000112 5B 02            [ 2]  302 	addw	sp, #2
      000114 20 26            [ 2]  303 	jra	00105$
      000116                        304 00104$:
                                    305 ;	proj/main.c: 89: else if (k == 3)
      000116 1E 07            [ 2]  306 	ldw	x, (0x07, sp)
      000118 A3 00 03         [ 2]  307 	cpw	x, #0x0003
      00011B 26 1F            [ 1]  308 	jrne	00105$
                                    309 ;	proj/main.c: 90: set_stars(1<<(random() % 13));
      00011D CDr01r93         [ 4]  310 	call	_random
      000120 5F               [ 1]  311 	clrw	x
      000121 97               [ 1]  312 	ld	xl, a
      000122 4B 0D            [ 1]  313 	push	#0x0d
      000124 4B 00            [ 1]  314 	push	#0x00
      000126 89               [ 2]  315 	pushw	x
      000127 CDr00r00         [ 4]  316 	call	__modsint
      00012A 5B 04            [ 2]  317 	addw	sp, #4
      00012C 9F               [ 1]  318 	ld	a, xl
      00012D 5F               [ 1]  319 	clrw	x
      00012E 5C               [ 1]  320 	incw	x
      00012F 4D               [ 1]  321 	tnz	a
      000130 27 04            [ 1]  322 	jreq	00153$
      000132                        323 00152$:
      000132 58               [ 2]  324 	sllw	x
      000133 4A               [ 1]  325 	dec	a
      000134 26 FC            [ 1]  326 	jrne	00152$
      000136                        327 00153$:
      000136 89               [ 2]  328 	pushw	x
      000137 CDr00r00         [ 4]  329 	call	_set_stars
      00013A 5B 02            [ 2]  330 	addw	sp, #2
      00013C                        331 00105$:
                                    332 ;	proj/main.c: 96: m = !m;
      00013C 7B 04            [ 1]  333 	ld	a, (0x04, sp)
      00013E A0 01            [ 1]  334 	sub	a, #0x01
      000140 7B 03            [ 1]  335 	ld	a, (0x03, sp)
      000142 A2 00            [ 1]  336 	sbc	a, #0x00
      000144 4F               [ 1]  337 	clr	a
      000145 49               [ 1]  338 	rlc	a
      000146 0F 01            [ 1]  339 	clr	(0x01, sp)
                                    340 ;	proj/main.c: 92: if (!m) {
      000148 1E 03            [ 2]  341 	ldw	x, (0x03, sp)
      00014A 26 17            [ 1]  342 	jrne	00111$
                                    343 ;	proj/main.c: 93: l += 1;
      00014C 1E 05            [ 2]  344 	ldw	x, (0x05, sp)
      00014E 5C               [ 1]  345 	incw	x
                                    346 ;	proj/main.c: 94: if (l > 250) {
      00014F 1F 05            [ 2]  347 	ldw	(0x05, sp), x
      000151 A3 00 FA         [ 2]  348 	cpw	x, #0x00fa
      000154 23 22            [ 2]  349 	jrule	00112$
                                    350 ;	proj/main.c: 95: l = 250;
      000156 AE 00 FA         [ 2]  351 	ldw	x, #0x00fa
      000159 1F 05            [ 2]  352 	ldw	(0x05, sp), x
                                    353 ;	proj/main.c: 96: m = !m;
      00015B 6B 04            [ 1]  354 	ld	(0x04, sp), a
      00015D 7B 01            [ 1]  355 	ld	a, (0x01, sp)
      00015F 6B 03            [ 1]  356 	ld	(0x03, sp), a
      000161 20 15            [ 2]  357 	jra	00112$
      000163                        358 00111$:
                                    359 ;	proj/main.c: 99: l -= 1;
      000163 1E 05            [ 2]  360 	ldw	x, (0x05, sp)
      000165 5A               [ 2]  361 	decw	x
                                    362 ;	proj/main.c: 100: if (l < 100) {
      000166 1F 05            [ 2]  363 	ldw	(0x05, sp), x
      000168 A3 00 64         [ 2]  364 	cpw	x, #0x0064
      00016B 24 0B            [ 1]  365 	jrnc	00112$
                                    366 ;	proj/main.c: 101: l = 100;
      00016D AE 00 64         [ 2]  367 	ldw	x, #0x0064
      000170 1F 05            [ 2]  368 	ldw	(0x05, sp), x
                                    369 ;	proj/main.c: 102: m = !m;
      000172 6B 04            [ 1]  370 	ld	(0x04, sp), a
      000174 7B 01            [ 1]  371 	ld	a, (0x01, sp)
      000176 6B 03            [ 1]  372 	ld	(0x03, sp), a
      000178                        373 00112$:
                                    374 ;	proj/main.c: 105: TIM2->CCR3L = l;
      000178 7B 06            [ 1]  375 	ld	a, (0x06, sp)
      00017A C7 53 16         [ 1]  376 	ld	0x5316, a
                                    377 ;	proj/main.c: 107: k++;
      00017D 1E 07            [ 2]  378 	ldw	x, (0x07, sp)
      00017F 5C               [ 1]  379 	incw	x
                                    380 ;	proj/main.c: 108: if (k == 4)
      000180 1F 07            [ 2]  381 	ldw	(0x07, sp), x
      000182 A3 00 04         [ 2]  382 	cpw	x, #0x0004
      000185 27 03            [ 1]  383 	jreq	00159$
      000187 CCr01r00         [ 2]  384 	jp	00116$
      00018A                        385 00159$:
                                    386 ;	proj/main.c: 109: k = 0;
      00018A 5F               [ 1]  387 	clrw	x
      00018B 1F 07            [ 2]  388 	ldw	(0x07, sp), x
      00018D CCr01r00         [ 2]  389 	jp	00116$
                                    390 ;	proj/main.c: 111: }
      000190 5B 08            [ 2]  391 	addw	sp, #8
      000192 81               [ 4]  392 	ret
                                    393 ;	proj/main.c: 122: unsigned char random() {
                                    394 ;	-----------------------------------------
                                    395 ;	 function random
                                    396 ;	-----------------------------------------
      000193                        397 _random:
                                    398 ;	proj/main.c: 123: x++; //x is incremented every round and is not affected by any other variable
      000193 72 5Cu00u99      [ 1]  399 	inc	_x+0
                                    400 ;	proj/main.c: 124: a = (a ^ c ^ x); //note the mix of addition and XOR
      000197 C6u00u9C         [ 1]  401 	ld	a, _c+0
      00019A C8u00u9A         [ 1]  402 	xor	a, _a+0
      00019D C8u00u99         [ 1]  403 	xor	a, _x+0
      0001A0 C7u00u9A         [ 1]  404 	ld	_a+0, a
                                    405 ;	proj/main.c: 125: b = (b + a); //And the use of very few instructions
      0001A3 C6u00u9B         [ 1]  406 	ld	a, _b+0
      0001A6 CBu00u9A         [ 1]  407 	add	a, _a+0
                                    408 ;	proj/main.c: 126: c = ((c + (b >> 1) ^ a)); // the AES S-Box Operation ensures an even distributon of entropy
      0001A9 C7u00u9B         [ 1]  409 	ld	_b+0, a
      0001AC 44               [ 1]  410 	srl	a
      0001AD CBu00u9C         [ 1]  411 	add	a, _c+0
      0001B0 C8u00u9A         [ 1]  412 	xor	a, _a+0
                                    413 ;	proj/main.c: 127: return (c);
      0001B3 C7u00u9C         [ 1]  414 	ld	_c+0, a
                                    415 ;	proj/main.c: 128: }
      0001B6 81               [ 4]  416 	ret
                                    417 ;	proj/main.c: 130: uint8_t flicker(uint8_t ch) {
                                    418 ;	-----------------------------------------
                                    419 ;	 function flicker
                                    420 ;	-----------------------------------------
      0001B7                        421 _flicker:
      0001B7 52 03            [ 2]  422 	sub	sp, #3
                                    423 ;	proj/main.c: 132: if (random() < WIND_VARIABILITY)
      0001B9 CDr01r93         [ 4]  424 	call	_random
      0001BC A1 05            [ 1]  425 	cp	a, #0x05
      0001BE 24 17            [ 1]  426 	jrnc	00104$
                                    427 ;	proj/main.c: 134: if(random() > 220)
      0001C0 CDr01r93         [ 4]  428 	call	_random
      0001C3 A1 DC            [ 1]  429 	cp	a, #0xdc
      0001C5 23 10            [ 2]  430 	jrule	00104$
                                    431 ;	proj/main.c: 135: wind[ch] = random();
      0001C7 AEr00r98         [ 2]  432 	ldw	x, #_wind+0
      0001CA 9F               [ 1]  433 	ld	a, xl
      0001CB 1B 06            [ 1]  434 	add	a, (0x06, sp)
      0001CD 02               [ 1]  435 	rlwa	x
      0001CE A9 00            [ 1]  436 	adc	a, #0x00
      0001D0 95               [ 1]  437 	ld	xh, a
      0001D1 89               [ 2]  438 	pushw	x
      0001D2 CDr01r93         [ 4]  439 	call	_random
      0001D5 85               [ 2]  440 	popw	x
      0001D6 F7               [ 1]  441 	ld	(x), a
      0001D7                        442 00104$:
                                    443 ;	proj/main.c: 138: if (wind[ch]>WIND_BASELINE)
      0001D7 AEr00r98         [ 2]  444 	ldw	x, #_wind+0
      0001DA 9F               [ 1]  445 	ld	a, xl
      0001DB 1B 06            [ 1]  446 	add	a, (0x06, sp)
      0001DD 90 97            [ 1]  447 	ld	yl, a
      0001DF 9E               [ 1]  448 	ld	a, xh
      0001E0 A9 00            [ 1]  449 	adc	a, #0x00
      0001E2 90 95            [ 1]  450 	ld	yh, a
      0001E4 90 F6            [ 1]  451 	ld	a, (y)
      0001E6 A1 1E            [ 1]  452 	cp	a, #0x1e
      0001E8 23 03            [ 2]  453 	jrule	00106$
                                    454 ;	proj/main.c: 139: wind[ch]--;
      0001EA 4A               [ 1]  455 	dec	a
      0001EB 90 F7            [ 1]  456 	ld	(y), a
      0001ED                        457 00106$:
                                    458 ;	proj/main.c: 142: if (flame[ch]<255)
      0001ED AEr00r96         [ 2]  459 	ldw	x, #_flame+0
      0001F0 9F               [ 1]  460 	ld	a, xl
      0001F1 1B 06            [ 1]  461 	add	a, (0x06, sp)
      0001F3 02               [ 1]  462 	rlwa	x
      0001F4 A9 00            [ 1]  463 	adc	a, #0x00
      0001F6 95               [ 1]  464 	ld	xh, a
      0001F7 F6               [ 1]  465 	ld	a, (x)
      0001F8 A1 FF            [ 1]  466 	cp	a, #0xff
      0001FA 24 02            [ 1]  467 	jrnc	00108$
                                    468 ;	proj/main.c: 143: flame[ch]++;
      0001FC 4C               [ 1]  469 	inc	a
      0001FD F7               [ 1]  470 	ld	(x), a
      0001FE                        471 00108$:
                                    472 ;	proj/main.c: 147: if (random() < (wind[ch]>>WIND_CALMNESS_CONSTANT))
      0001FE 89               [ 2]  473 	pushw	x
      0001FF 90 89            [ 2]  474 	pushw	y
      000201 CDr01r93         [ 4]  475 	call	_random
      000204 6B 07            [ 1]  476 	ld	(0x07, sp), a
      000206 90 85            [ 2]  477 	popw	y
      000208 85               [ 2]  478 	popw	x
      000209 90 F6            [ 1]  479 	ld	a, (y)
      00020B 44               [ 1]  480 	srl	a
      00020C 44               [ 1]  481 	srl	a
      00020D 11 03            [ 1]  482 	cp	a, (0x03, sp)
      00020F 23 06            [ 2]  483 	jrule	00110$
                                    484 ;	proj/main.c: 148: flame[ch] = random();
      000211 89               [ 2]  485 	pushw	x
      000212 CDr01r93         [ 4]  486 	call	_random
      000215 85               [ 2]  487 	popw	x
      000216 F7               [ 1]  488 	ld	(x), a
      000217                        489 00110$:
                                    490 ;	proj/main.c: 152: if (flame[ch] > flameprime[ch]) {
      000217 F6               [ 1]  491 	ld	a, (x)
      000218 6B 02            [ 1]  492 	ld	(0x02, sp), a
      00021A AEr00r97         [ 2]  493 	ldw	x, #_flameprime+0
      00021D 9F               [ 1]  494 	ld	a, xl
      00021E 1B 06            [ 1]  495 	add	a, (0x06, sp)
      000220 02               [ 1]  496 	rlwa	x
      000221 A9 00            [ 1]  497 	adc	a, #0x00
      000223 95               [ 1]  498 	ld	xh, a
      000224 F6               [ 1]  499 	ld	a, (x)
                                    500 ;	proj/main.c: 154: flameprime[ch] += FLAME_AGILITY;
      000225 6B 01            [ 1]  501 	ld	(0x01, sp), a
                                    502 ;	proj/main.c: 152: if (flame[ch] > flameprime[ch]) {
      000227 11 02            [ 1]  503 	cp	a, (0x02, sp)
      000229 24 0B            [ 1]  504 	jrnc	00116$
                                    505 ;	proj/main.c: 153: if (flameprime[ch] < (255 - FLAME_AGILITY))
      00022B A1 FD            [ 1]  506 	cp	a, #0xfd
      00022D 24 10            [ 1]  507 	jrnc	00117$
                                    508 ;	proj/main.c: 154: flameprime[ch] += FLAME_AGILITY;
      00022F 7B 01            [ 1]  509 	ld	a, (0x01, sp)
      000231 AB 02            [ 1]  510 	add	a, #0x02
      000233 F7               [ 1]  511 	ld	(x), a
      000234 20 09            [ 2]  512 	jra	00117$
      000236                        513 00116$:
                                    514 ;	proj/main.c: 155: } else if (flameprime[ch] > (FLAME_AGILITY))
      000236 A1 02            [ 1]  515 	cp	a, #0x02
      000238 23 05            [ 2]  516 	jrule	00117$
                                    517 ;	proj/main.c: 156: flameprime[ch] -= FLAME_AGILITY;
      00023A 7B 01            [ 1]  518 	ld	a, (0x01, sp)
      00023C A0 02            [ 1]  519 	sub	a, #0x02
      00023E F7               [ 1]  520 	ld	(x), a
      00023F                        521 00117$:
                                    522 ;	proj/main.c: 159: return flameprime[ch];
      00023F F6               [ 1]  523 	ld	a, (x)
                                    524 ;	proj/main.c: 160: }
      000240 5B 03            [ 2]  525 	addw	sp, #3
      000242 81               [ 4]  526 	ret
                                    527 ;	proj/main.c: 162: void uptime_routine(void) {
                                    528 ;	-----------------------------------------
                                    529 ;	 function uptime_routine
                                    530 ;	-----------------------------------------
      000243                        531 _uptime_routine:
                                    532 ;	proj/main.c: 163: }
      000243 81               [ 4]  533 	ret
                                    534 ;	proj/main.c: 166: static inline void delay_cycles(uint16_t cycles) {
                                    535 ;	-----------------------------------------
                                    536 ;	 function delay_cycles
                                    537 ;	-----------------------------------------
      000244                        538 _delay_cycles:
                                    539 ;	proj/main.c: 167: __asm__("nop\n nop\n"); 
      000244 9D               [ 1]  540 	nop
      000245 9D               [ 1]  541 	nop
                                    542 ;	proj/main.c: 168: do {          // ASM: ldw X, #tick; lab$: decw X; tnzw X; jrne lab$
      000246 1E 03            [ 2]  543 	ldw	x, (0x03, sp)
      000248                        544 00101$:
                                    545 ;	proj/main.c: 169: cycles--; //      2c;                 1c;     2c    ; 1/2c   
      000248 5A               [ 2]  546 	decw	x
                                    547 ;	proj/main.c: 170: } while ( cycles );
      000249 5D               [ 2]  548 	tnzw	x
      00024A 26 FC            [ 1]  549 	jrne	00101$
                                    550 ;	proj/main.c: 171: __asm__("nop\n");
      00024C 9D               [ 1]  551 	nop
                                    552 ;	proj/main.c: 172: }
      00024D 81               [ 4]  553 	ret
                                    554 ;	proj/main.c: 174: void _delay_us(uint16_t us) { 
                                    555 ;	-----------------------------------------
                                    556 ;	 function _delay_us
                                    557 ;	-----------------------------------------
      00024E                        558 __delay_us:
                                    559 ;	proj/main.c: 175: delay_cycles(((F_CPU * us / 1000000UL)-5)/5);
      00024E 16 03            [ 2]  560 	ldw	y, (0x03, sp)
      000250 5F               [ 1]  561 	clrw	x
      000251 90 89            [ 2]  562 	pushw	y
      000253 89               [ 2]  563 	pushw	x
      000254 4B 00            [ 1]  564 	push	#0x00
      000256 4B 24            [ 1]  565 	push	#0x24
      000258 4B F4            [ 1]  566 	push	#0xf4
      00025A 4B 00            [ 1]  567 	push	#0x00
      00025C CDr00r00         [ 4]  568 	call	__mullong
      00025F 5B 08            [ 2]  569 	addw	sp, #8
      000261 4B 40            [ 1]  570 	push	#0x40
      000263 4B 42            [ 1]  571 	push	#0x42
      000265 4B 0F            [ 1]  572 	push	#0x0f
      000267 4B 00            [ 1]  573 	push	#0x00
      000269 89               [ 2]  574 	pushw	x
      00026A 90 89            [ 2]  575 	pushw	y
      00026C CDr00r00         [ 4]  576 	call	__divulong
      00026F 5B 08            [ 2]  577 	addw	sp, #8
      000271 51               [ 1]  578 	exgw	x, y
      000272 72 A2 00 05      [ 2]  579 	subw	y, #0x0005
      000276 9F               [ 1]  580 	ld	a, xl
      000277 A2 00            [ 1]  581 	sbc	a, #0x00
      000279 02               [ 1]  582 	rlwa	x
      00027A A2 00            [ 1]  583 	sbc	a, #0x00
      00027C 95               [ 1]  584 	ld	xh, a
      00027D 4B 05            [ 1]  585 	push	#0x05
      00027F 4B 00            [ 1]  586 	push	#0x00
      000281 4B 00            [ 1]  587 	push	#0x00
      000283 4B 00            [ 1]  588 	push	#0x00
      000285 90 89            [ 2]  589 	pushw	y
      000287 89               [ 2]  590 	pushw	x
      000288 CDr00r00         [ 4]  591 	call	__divulong
      00028B 5B 08            [ 2]  592 	addw	sp, #8
                                    593 ;	proj/main.c: 167: __asm__("nop\n nop\n"); 
      00028D 9D               [ 1]  594 	nop
      00028E 9D               [ 1]  595 	nop
                                    596 ;	proj/main.c: 168: do {          // ASM: ldw X, #tick; lab$: decw X; tnzw X; jrne lab$
      00028F                        597 00101$:
                                    598 ;	proj/main.c: 169: cycles--; //      2c;                 1c;     2c    ; 1/2c   
      00028F 5A               [ 2]  599 	decw	x
                                    600 ;	proj/main.c: 170: } while ( cycles );
      000290 5D               [ 2]  601 	tnzw	x
      000291 26 FC            [ 1]  602 	jrne	00101$
                                    603 ;	proj/main.c: 171: __asm__("nop\n");
      000293 9D               [ 1]  604 	nop
                                    605 ;	proj/main.c: 175: delay_cycles(((F_CPU * us / 1000000UL)-5)/5);
                                    606 ;	proj/main.c: 176: }
      000294 81               [ 4]  607 	ret
                                    608 ;	proj/main.c: 178: void _delay_ms(uint16_t ms) { 
                                    609 ;	-----------------------------------------
                                    610 ;	 function _delay_ms
                                    611 ;	-----------------------------------------
      000295                        612 __delay_ms:
                                    613 ;	proj/main.c: 179: while (ms--)
      000295 1E 03            [ 2]  614 	ldw	x, (0x03, sp)
      000297                        615 00101$:
      000297 90 93            [ 1]  616 	ldw	y, x
      000299 5A               [ 2]  617 	decw	x
      00029A 90 5D            [ 2]  618 	tnzw	y
      00029C 26 01            [ 1]  619 	jrne	00115$
      00029E 81               [ 4]  620 	ret
      00029F                        621 00115$:
                                    622 ;	proj/main.c: 180: _delay_us(1000);
      00029F 89               [ 2]  623 	pushw	x
      0002A0 4B E8            [ 1]  624 	push	#0xe8
      0002A2 4B 03            [ 1]  625 	push	#0x03
      0002A4 CDr02r4E         [ 4]  626 	call	__delay_us
      0002A7 5B 02            [ 2]  627 	addw	sp, #2
      0002A9 85               [ 2]  628 	popw	x
      0002AA 20 EB            [ 2]  629 	jra	00101$
                                    630 ;	proj/main.c: 181: }
      0002AC 81               [ 4]  631 	ret
                                    632 ;	proj/main.c: 183: void assert_failed(uint8_t* file, uint32_t line) {
                                    633 ;	-----------------------------------------
                                    634 ;	 function assert_failed
                                    635 ;	-----------------------------------------
      0002AD                        636 _assert_failed:
                                    637 ;	proj/main.c: 184: while (1);
      0002AD                        638 00102$:
      0002AD 20 FE            [ 2]  639 	jra	00102$
                                    640 ;	proj/main.c: 185: }
      0002AF 81               [ 4]  641 	ret
                                    642 	.area CODE
                                    643 	.area INITIALIZER
      000000                        644 __xinit__nbLedsBytes:
      000000 00 96                  645 	.dw #0x0096
                                    646 	.area CABS (ABS)
